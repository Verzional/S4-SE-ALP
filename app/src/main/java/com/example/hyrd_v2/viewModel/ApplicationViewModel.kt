package com.example.hyrd_v2.viewModel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.hyrd_v2.model.ApplicationModel
import com.example.hyrd_v2.model.UserModel
import com.example.hyrd_v2.repository.FirebaseApplicationRepository
import com.example.hyrd_v2.repository.FirebaseAuthRepository
import com.example.hyrd_v2.uiState.ApplicantListUIState
import com.example.hyrd_v2.uiState.ApplyJobUIState
import com.example.hyrd_v2.uiState.UpdateApplicationStatusUIState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ApplicationViewModel @Inject constructor(
    private val applicationRepository: FirebaseApplicationRepository,
    private val authRepository: FirebaseAuthRepository // To get current user info
) : ViewModel() {

    private val _applyJobState = MutableStateFlow(ApplyJobUIState())
    val applyJobState: StateFlow<ApplyJobUIState> = _applyJobState.asStateFlow()

    private val _applicantListState = MutableStateFlow(ApplicantListUIState())
    val applicantListState: StateFlow<ApplicantListUIState> = _applicantListState.asStateFlow()

    private val _updateStatusState = MutableStateFlow(UpdateApplicationStatusUIState())
    val updateStatusState: StateFlow<UpdateApplicationStatusUIState> =
        _updateStatusState.asStateFlow()


    fun checkIfAlreadyApplied(workId: String) {
        viewModelScope.launch {
            val currentUser = authRepository.currentUser
            if (currentUser == null) {
                _applyJobState.value = ApplyJobUIState(error = "User not logged in.")
                return@launch
            }
            _applyJobState.value = ApplyJobUIState(isLoading = true)
            val result = applicationRepository.checkApplicationStatus(currentUser.uid, workId)
            result.fold(onSuccess = { application ->
                _applyJobState.value = ApplyJobUIState(
                    isLoading = false,
                    hasApplied = application != null,
                    existingApplicationStatus = application?.status
                )
            }, onFailure = { exception ->
                _applyJobState.value = ApplyJobUIState(isLoading = false, error = exception.message)
            })
        }
    }


    fun applyForJob(workId: String, cvPath: String, applicantProfile: UserModel?) {
        viewModelScope.launch {
            val currentUser = authRepository.currentUser
            if (currentUser == null || applicantProfile == null) {
                _applyJobState.value =
                    ApplyJobUIState(error = "User not logged in or profile missing.")
                return@launch
            }

            _applyJobState.value = ApplyJobUIState(isLoading = true)

            val application = ApplicationModel(
                // application_id is generated by Firestore
                work_id = workId,
                worker_id = currentUser.uid,
                applicant_name = applicantProfile.name, // Denormalized data
                applicant_email = applicantProfile.email, // Denormalized data
                cv_path = cvPath,
                status = "pending"
                // application_date will be set by @ServerTimestamp
            )

            val result = applicationRepository.applyForJob(application)
            result.fold(onSuccess = {
                _applyJobState.value =
                    ApplyJobUIState(applicationSubmitted = true, isLoading = false)
            }, onFailure = { exception ->
                _applyJobState.value = ApplyJobUIState(error = exception.message, isLoading = false)
            })
        }
    }

    fun loadApplicantsForJob(workId: String) {
        viewModelScope.launch {
            _applicantListState.value = ApplicantListUIState(isLoading = true)
            val result = applicationRepository.loadApplicants(workId)
            result.fold(onSuccess = { applicants ->
                _applicantListState.value =
                    ApplicantListUIState(applicants = applicants, isLoading = false)
            }, onFailure = { exception ->
                _applicantListState.value =
                    ApplicantListUIState(error = exception.message, isLoading = false)
            })
        }
    }

    fun updateApplicationStatus(applicationId: String, newStatus: String, workIdToRefresh: String) {
        viewModelScope.launch {
            _updateStatusState.value = UpdateApplicationStatusUIState(isLoading = true)
            val result = applicationRepository.updateApplicationStatus(applicationId, newStatus)
            result.fold(onSuccess = {
                _updateStatusState.value =
                    UpdateApplicationStatusUIState(statusUpdated = true, isLoading = false)
                loadApplicantsForJob(workIdToRefresh) // Refresh the list of applicants
            }, onFailure = { exception ->
                _updateStatusState.value =
                    UpdateApplicationStatusUIState(error = exception.message, isLoading = false)
            })
        }
    }

    fun resetApplyJobState() {
        _applyJobState.value = ApplyJobUIState()
    }

    fun resetUpdateStatusState() {
        _updateStatusState.value = UpdateApplicationStatusUIState()
    }
}